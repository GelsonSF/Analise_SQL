/* Consulta das transações feitas */
WITH TRANSFER_INS_T AS(
	SELECT 
		IT.TRANSACTION_COMPLETED_AT											AS COMPLETED,
		M.ACTION_MONTH														AS ACTION_MONTH, 
		Y.ACTION_YEAR														AS ACTION_YEAR,
		IT.ACCOUNT_ID														AS ACCOUNT_ID,
		TM.ACTION_TIMESTAMP													AS ACTION_TIMESTAMP,
		CASE
			WHEN IT.STATUS = 'completed'
				THEN SUM(IT.AMOUNT)			
					ELSE 0 END												AS AMOUNT_IN,
		0																	AS AMOUNT_OUT
	FROM 
		D_TIME TM
		JOIN TRANSFER_INS IT ON IT.TRANSACTION_COMPLETED_AT = TM.TIME_ID
		JOIN D_MONTH M ON M.MONTH_ID = TM.MONTH_ID
		JOIN D_YEAR Y ON Y.YEAR_ID = TM.YEAR_ID
	WHERE 
		TM.ACTION_TIMESTAMP BETWEEN '01.01.2020 00:00:00.000' AND '31.12.2020 23:59:59.999'
	GROUP BY 
		IT.TRANSACTION_COMPLETED_AT, M.ACTION_MONTH, Y.ACTION_YEAR, IT.ACCOUNT_ID, TM.ACTION_TIMESTAMP, IT.STATUS
),
/* Consulta das transações recebidas */
TRANSFER_OUTS_T AS(
	SELECT 
		OT.TRANSACTION_COMPLETED_AT											AS COMPLETED,
		M.ACTION_MONTH														AS ACTION_MONTH, 
		Y.ACTION_YEAR														AS ACTION_YEAR,
		OT.ACCOUNT_ID														AS ACCOUNT_ID,
		TM.ACTION_TIMESTAMP													AS ACTION_TIMESTAMP,
		0																	AS AMOUNT_IN,
		CASE
			WHEN OT.STATUS = 'completed'
				THEN SUM(OT.AMOUNT)			
					ELSE 0 END												AS AMOUNT_OUT
	FROM 
		D_TIME TM
		JOIN TRANSFER_OUTS OT ON OT.TRANSACTION_COMPLETED_AT = TM.TIME_ID
		JOIN D_MONTH M ON M.MONTH_ID = TM.MONTH_ID
		JOIN D_YEAR Y ON Y.YEAR_ID = TM.YEAR_ID
	WHERE 
		TM.ACTION_TIMESTAMP BETWEEN '01.01.2020 00:00:00.000' AND '31.12.2020 23:59:59.999'
	GROUP BY 
		OT.TRANSACTION_COMPLETED_AT, M.ACTION_MONTH, Y.ACTION_YEAR, OT.ACCOUNT_ID, TM.ACTION_TIMESTAMP, OT.STATUS
),
/* Consulta das transações feitas e recebidas via PIX */
PIX_MOVEMENTS_T AS (
	SELECT 
		PIX.PIX_COMPLETED_AT												AS COMPLETED,
		M.ACTION_MONTH														AS ACTION_MONTH, 
		Y.ACTION_YEAR														AS ACTION_YEAR,
		PIX.ACCOUNT_ID														AS ACCOUNT_ID,
		TM.ACTION_TIMESTAMP													AS ACTION_TIMESTAMP,
		CASE
			WHEN PIX.IN_OR_OUT = 'pix_in' AND PIX.STATUS = 'completed'
				THEN SUM(PIX.PIX_AMOUNT)		
					ELSE 0 END												AS AMOUNT_IN,
		CASE
			WHEN PIX.IN_OR_OUT = 'pix_out' AND PIX.STATUS = 'completed'
				THEN SUM(PIX.PIX_AMOUNT)				
					ELSE 0 END												AS AMOUNT_OUT
	FROM 
		D_TIME TM
		JOIN PIX_MOVEMENTS PIX ON PIX.PIX_COMPLETED_AT = TM.TIME_ID
		JOIN D_MONTH M ON M.MONTH_ID = TM.MONTH_ID
		JOIN D_YEAR Y ON Y.YEAR_ID = TM.YEAR_ID
	WHERE 
		TM.ACTION_TIMESTAMP BETWEEN '01.01.2020 00:00:00.000' AND '31.12.2020 23:59:59.999'
	GROUP BY 
		PIX.PIX_COMPLETED_AT, M.ACTION_MONTH, Y.ACTION_YEAR, PIX.ACCOUNT_ID, TM.ACTION_TIMESTAMP, PIX.IN_OR_OUT, PIX.STATUS
),
/* Union para apresentar todos os resultados em um unico local  */
VALORES_IN_OUTS AS(
	SELECT 
		*
	FROM 
		TRANSFER_INS_T
	UNION ALL 
	SELECT 
		*
	FROM 	
		TRANSFER_OUTS_T
	UNION ALL 
	SELECT 
		*
	FROM 
		PIX_MOVEMENTS_T
)
/* Soma dos valores, para apresentação dos resultados. Tomei a liberdade de formatar em valores PT-BR para melhor leitura  */
SELECT 
	V.ACTION_MONTH																															AS MES, 
	CONCAT(C.FIRST_NAME,' ' , C.LAST_NAME)																									AS NOME,
	FORMAT(SUM(V.AMOUNT_IN), 'C', 'pt-br')																									AS TRANSFERENCIA_RECEBIDA,
	FORMAT(SUM(V.AMOUNT_OUT), 'C', 'pt-br')																									AS TRANSFERENCIA_FEITA,
	FORMAT(SUM(SUM(V.AMOUNT_IN) - SUM(V.AMOUNT_OUT)) OVER(ORDER BY CONCAT(C.FIRST_NAME,' ' , C.LAST_NAME), V.ACTION_MONTH), 'C', 'pt-br')	AS SALDO_CONTA	
FROM 
	CUSTOMERS C 
    JOIN ACCOUNTS A ON A.CUSTOMER_ID = C.CUSTOMER_ID
	JOIN VALORES_IN_OUTS V ON V.ACCOUNT_ID = A.ACCOUNT_ID
GROUP BY 
	V.ACTION_MONTH, C.FIRST_NAME, C.LAST_NAME
ORDER BY 
	CONCAT(C.FIRST_NAME,' ' , C.LAST_NAME), V.ACTION_MONTH